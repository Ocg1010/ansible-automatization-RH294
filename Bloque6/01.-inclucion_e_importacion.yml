# A continuación se muestra un ejemplo simple de un playbook maestro que importa dos playbooks adicionales:

- name: Prepare the web server
  import_playbook: web.yml

- name: Prepare the database server
  import_playbook: db.yml
  

    # También puede intercalar plays en su playbook maestra con playbooks importados.

- name: Play 1
  hosts: localhost
  tasks:
    - ansible.builtin.debug:
        msg: Play 1

- name: Import Playbook
  import_playbook: play2.yml
    # En el ejemplo anterior, el play Play 1 se ejecuta primero y, luego, los plays importados del playbook play2.yml.


    # Puede importar o incluir una lista de tareas de un archivo de tareas a un play. Un archivo de tareas es un archivo que contiene una lista plana de tareas:

[admin@node ~]$ cat webserver_tasks.yml
- name: Installs the httpd package
  ansible.builtin.dnf:
    name: httpd
    state: latest

- name: Starts the httpd service
  ansible.builtin.service:
    name: httpd
    state: started



---
- name: Install web server
  hosts: webservers
  tasks:
  - import_tasks: webserver_tasks.yml

# Cuando importa un archivo de tareas, las tareas de ese archivo se insertan directamente cuando se analiza el playbook. Debido a que import_tasks importa estáticamente las tareas cuando se analiza el playbook, se deben considerar los siguientes ítems:

#Al usar la característica import_tasks, las declaraciones condicionales establecidas en la importación, como when, se aplican a cada una de las tareas que se importan.

# No se puede usar bucles con la característica import_tasks.

# Si usa una variable para especificar el nombre del archivo por importar, no puede usar una variable de inventario de host o grupo.

# EJEMPLOS
# El siguiente archivo de tareas instala el paquete necesario para un servicio web y, luego, habilita e inicia el servicio requerido.

---
  - name: Install the httpd package
    ansible.builtin.dnf:
      name: httpd
      state: latest
  - name: Start the httpd service
    ansible.builtin.service:
      name: httpd
      enabled: true
      state: started
# Si parametriza el paquete y los elementos de servicio como se muestra en el siguiente ejemplo, el archivo de tareas también se puede usar para la instalación y administración de otro software y sus servicios, en lugar de ser útil solo para el servicio web.

---
  - name: Install the {{ package }} package
    ansible.builtin.dnf:
      name: "{{ package }}"
      state: latest
  - name: Start the {{ service }} service
    ansible.builtin.service:
      name: "{{ service }}"
      enabled: true
      state: started

# Posteriormente, al incorporar el archivo de tareas en un playbook, defina las variables que se usarán para la ejecución de la tarea de la siguiente manera:

  - name: Import task file and set variables
      import_tasks: task.yml
      vars:
        package: httpd
        service: httpd

# Puede usar la misma técnica para hacer que los archivos de play sean más reutilizables. Al incorporar un archivo de play en un playbook, se transfieren las variables que se usarán para la ejecución del play de la siguiente manera:

...output omitted...
- name: Import play file and set the variable
  import_playbook: play.yml
  vars:
    package: mariadb



#Raesumen de las diferencias:
#include_tasks:
#Las tareas incluidas comparten el contexto del playbook o role que las incluye.
#Las variables definidas en el playbook o role son accesibles para las tareas incluidas.
#Útil cuando se desea reutilizar un conjunto de tareas en múltiples lugares con el mismo contexto.
#import_tasks:
#Las tareas importadas se ejecutan en su propio contexto, aisladas del playbook o role que las importa.
#Las variables definidas en el playbook o role no están disponibles para las tareas importadas.
#Proporciona mayor modularidad y aislamiento, útil cuando se desea una separación clara entre las tareas importadas y el contexto del playbook o role.